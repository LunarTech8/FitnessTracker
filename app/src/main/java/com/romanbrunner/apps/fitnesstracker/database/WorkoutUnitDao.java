/*-------------------------------------------------------------
// Description:
Dao = Data access object.
Interface that defines how the Workout database in AppDatabase can be accessed.
The function implementations are generated by Room with the annotation settings.
(https://developer.android.com/training/data-storage/room/accessing-data.html)
-------------------------------------------------------------*/
package com.romanbrunner.apps.fitnesstracker.database;

import androidx.lifecycle.LiveData;
import androidx.room.Dao;
import androidx.room.Delete;
import androidx.room.Insert;
import androidx.room.Query;
import androidx.room.Update;

import com.romanbrunner.apps.fitnesstracker.ui.MainActivity;

import java.util.List;


@Dao
public interface WorkoutUnitDao
{
    // --------------------
    // Functional code
    // --------------------

    @Query("SELECT * FROM WorkoutUnits WHERE id < " + MainActivity.DEBUG_WORKOUT_MIN_ID)
    LiveData<List<WorkoutUnitEntity>> loadAllNormal();

    @Query("SELECT * FROM WorkoutUnits WHERE id >= " + MainActivity.DEBUG_WORKOUT_MIN_ID)
    LiveData<List<WorkoutUnitEntity>> loadAllDebug();

    @Query("SELECT * FROM WorkoutUnits WHERE id < " + MainActivity.DEBUG_WORKOUT_MIN_ID + " ORDER BY id DESC LIMIT 1")
    LiveData<WorkoutUnitEntity> loadNewestNormal();

    @Query("SELECT * FROM WorkoutUnits WHERE id >= " + MainActivity.DEBUG_WORKOUT_MIN_ID + " ORDER BY id DESC LIMIT 1")
    LiveData<WorkoutUnitEntity> loadNewestDebug();

    @Query("SELECT * FROM WorkoutUnits WHERE workoutInfoName = :searchWorkoutInfoName AND id < " + MainActivity.DEBUG_WORKOUT_MIN_ID + " ORDER BY workoutInfoVersion DESC LIMIT 1")
    LiveData<WorkoutUnitEntity> loadNewestByWorkoutInfoNameNormal(String searchWorkoutInfoName);

    @Query("SELECT * FROM WorkoutUnits WHERE workoutInfoName = :searchWorkoutInfoName AND id >= " + MainActivity.DEBUG_WORKOUT_MIN_ID + " ORDER BY id DESC LIMIT 1")
    LiveData<WorkoutUnitEntity> loadNewestByWorkoutInfoNameDebug(String searchWorkoutInfoName);

    @Query("SELECT * FROM WorkoutUnits WHERE id < " + MainActivity.DEBUG_WORKOUT_MIN_ID + " AND id < (SELECT MAX(id) FROM WorkoutUnits) ORDER BY id DESC LIMIT 1")
    LiveData<WorkoutUnitEntity> loadLastNormal();

    @Query("SELECT * FROM WorkoutUnits WHERE id >= " + MainActivity.DEBUG_WORKOUT_MIN_ID + " AND id < (SELECT MAX(id) FROM WorkoutUnits) ORDER BY id DESC LIMIT 1")
    LiveData<WorkoutUnitEntity> loadLastDebug();

    @Insert
    void insert(WorkoutUnitEntity... workoutUnits);

    @Update
    void update(WorkoutUnitEntity... workoutUnits);

    @Delete
    void delete(WorkoutUnitEntity... workoutUnit);
    @Delete
    void delete(List<WorkoutUnitEntity> workoutUnits);
}